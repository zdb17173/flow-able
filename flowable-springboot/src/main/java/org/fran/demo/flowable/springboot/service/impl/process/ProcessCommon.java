package org.fran.demo.flowable.springboot.service.impl.process;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.flowable.bpmn.model.BpmnModel;
import org.flowable.engine.*;
import org.flowable.engine.runtime.Execution;
import org.flowable.engine.runtime.ProcessInstance;
import org.flowable.image.ProcessDiagramGenerator;
import org.fran.demo.flowable.springboot.dao.mapper.*;
import org.fran.demo.flowable.springboot.exceptions.ProcessIllegalAccessException;
import org.fran.demo.flowable.springboot.service.LoginUserService;
import org.fran.demo.flowable.springboot.service.impl.loginuser.User;

import javax.annotation.Resource;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.util.*;

//流程公共，flowable依赖、json转换、获取登录用户
public abstract class ProcessCommon {
    @Resource
    ProcessEngine processEngine;
    @Resource
    RuntimeService runtimeService;
    @Resource
    TaskService taskService;
    @Resource
    HistoryService historyService;
    @Resource
    RepositoryService repositoryService;
    @Resource
    AppProcessDefinitionMapper appProcessDefinitionMapper;
    @Resource
    AppProcessDefinitionVariablesMapper appProcessDefinitionVariablesMapper;
    @Resource
    AppProcessInstanceDataMapper appProcessInstanceDataMapper;
    @Resource
    AppProcessSearchKeysMapper appProcessSearchKeysMapper;
    @Resource
    AppProcessInstanceSearchMapper appProcessInstanceSearchMapper;
    @Resource
    LoginUserService loginUserService;

    public static int MAX_PAGE_SIZE = 10;
    static Date minDate = new Date(532281600000l);//基准时间
    static String endProcessImage = "";
    static ObjectMapper objectMapper = new ObjectMapper();
    ProcessCommon(){
        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    //获取当前用户
    protected User getCurrUser(){
        User user = loginUserService.getCurUser();
        if(user == null || user.getUserId() == null)
            throw new ProcessIllegalAccessException("未获得登录用户信息");
        return user;
    }

    //判断流程是否已经结束
    protected boolean processIsEnd(String instanceId){
        ProcessInstance instance = runtimeService.createProcessInstanceQuery()
                .processInstanceId(instanceId)
                .singleResult();
        if(instance == null || instance.isEnded()){
            return true;
        }else
            return false;
    }

    protected static Map<String, Object> dataToMap(byte[] bytes) throws IOException {
        try {
            Map<String, Object> jsonData = objectMapper.readValue(bytes, new TypeReference<Map<String, Object>>() {
            });
            return jsonData;
        } catch (IOException e) {
            throw e;
        }
    }

    protected static byte[] mapToJsonBytes(Map<String, Object> variables) throws JsonProcessingException {
        try {
            String json = objectMapper.writeValueAsString(variables);
            return json.getBytes(StandardCharsets.UTF_8);
        } catch (JsonProcessingException e) {
            throw e;
        }
    }

}
